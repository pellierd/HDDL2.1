(define (domain satellite2)
	(:requirements
	    :durative-actions
	    :equality
	    :negative-preconditions
	    :typing
	    :numeric-fluents
	    :timed-initial-literals
	    :hierarchy)
	(:types
		calib_direction - direction
		image_direction - direction
		instrument
		satellite
		mode

	)
	(:predicates
		(on_board ?arg0 - instrument ?arg1 - satellite)
		(supports ?arg0 - instrument ?arg1 - mode)
		(pointing ?arg0 - satellite ?arg1 - direction)
		(power_avail ?arg0 - satellite)
		(power_on ?arg0 - instrument)
		(calibrated ?arg0 - instrument)
		(have_image ?arg0 - image_direction ?arg1 - mode)
		(calibration_target ?arg0 - instrument ?arg1 - calib_direction)
		(current-time)
		(observable ?arg0 - image_direction)
	)

    (:functions
        (turn-time ?d1 - direction ?d2 - direction)
        (calibration-time ?i - instrument)
    )

	(:task do_observation
		:parameters (?do_d - image_direction ?do_m - mode)
	)

	(:task activate_instrument
		:parameters (?ai_s - satellite ?ai_i - instrument)
	)

	(:task auto_calibrate
		:parameters (?ac_s - satellite ?ac_i - instrument)
	)

	(:method method0
		:parameters (?mdoatt_t_d_prev - image_direction ?mdoatt_t_s - satellite ?mdoatt_ti_d - image_direction ?mdoatt_ti_i - instrument ?mdoatt_ti_m - mode)
		:task (do_observation ?mdoatt_ti_d ?mdoatt_ti_m)
		:subtasks (and
		 (task0 (activate_instrument ?mdoatt_t_s ?mdoatt_ti_i))
		 (task1 (turn_to ?mdoatt_t_s ?mdoatt_ti_d ?mdoatt_t_d_prev))
		 (task2 (take_image ?mdoatt_t_s ?mdoatt_ti_d ?mdoatt_ti_i ?mdoatt_ti_m))
		)
		:ordering (and
			(< task0 task1)
			(< task1 task2)
		)
		:constraints (and
			(not (= ?mdoatt_ti_d ?mdoatt_t_d_prev))
		)
	)

	(:method method1
		:parameters (?mdott_t_d_prev - direction ?mdott_t_s - satellite ?mdott_ti_d - image_direction ?mdott_ti_i - instrument ?mdott_ti_m - mode)
		:task (do_observation ?mdott_ti_d ?mdott_ti_m)
		:subtasks (and
		 (task0 (turn_to ?mdott_t_s ?mdott_ti_d ?mdott_t_d_prev))
		 (task1 (take_image ?mdott_t_s ?mdott_ti_d ?mdott_ti_i ?mdott_ti_m))
		)
		:ordering (and
			(< task0 task1)
		)
		:constraints (and
			(not (= ?mdott_ti_d ?mdott_t_d_prev))
		)
	)

	(:method method2
		:parameters (?mdoat_ti_d - image_direction ?mdoat_ti_i - instrument ?mdoat_ti_m - mode ?mdoat_ti_s - satellite)
		:task (do_observation ?mdoat_ti_d ?mdoat_ti_m)
		:subtasks (and
		 (task0 (activate_instrument ?mdoat_ti_s ?mdoat_ti_i))
		 (task1 (take_image ?mdoat_ti_s ?mdoat_ti_d ?mdoat_ti_i ?mdoat_ti_m))
		)
		:ordering (and
			(< task0 task1)
		)
	)

	(:method method3
		:parameters (?mdot_ti_d - image_direction ?mdot_ti_i - instrument ?mdot_ti_m - mode ?mdot_ti_s - satellite)
		:task (do_observation ?mdot_ti_d ?mdot_ti_m)
		:subtasks (and
		 (task0 (take_image ?mdot_ti_s ?mdot_ti_d ?mdot_ti_i ?mdot_ti_m))
		)
	)

	(:method method4
		:parameters (?maissa_ac_i - instrument ?maissa_ac_s - satellite ?maissa_sof_i - instrument)
		:task (activate_instrument ?maissa_ac_s ?maissa_ac_i)
		:subtasks (and
		 (task0 (switch_off ?maissa_sof_i ?maissa_ac_s))
		 (task1 (switch_on ?maissa_ac_i ?maissa_ac_s))
		 (task2 (auto_calibrate ?maissa_ac_s ?maissa_ac_i))
		)
		:ordering (and
			(< task0 task1)
			(< task1 task2)
		)
		:constraints (and
			(not (= ?maissa_sof_i ?maissa_ac_i))
		)
	)

	(:method method5
		:parameters (?maisa_ac_i - instrument ?maisa_ac_s - satellite)
		:task (activate_instrument ?maisa_ac_s ?maisa_ac_i)
		:subtasks (and
		 (task0 (switch_on ?maisa_ac_i ?maisa_ac_s))
		 (task1 (auto_calibrate ?maisa_ac_s ?maisa_ac_i))
		)
		:ordering (and
			(< task0 task1)
		)
	)

	(:method method6
		:parameters (?mactc_c_d - calib_direction ?mactc_c_i - instrument ?mactc_c_s - satellite ?mactc_tt_d_prev - direction)
		:task (auto_calibrate ?mactc_c_s ?mactc_c_i)
		:subtasks (and
		 (task0 (turn_to ?mactc_c_s ?mactc_c_d ?mactc_tt_d_prev))
		 (task1 (calibrate ?mactc_c_s ?mactc_c_i ?mactc_c_d))
		)
		:ordering (and
			(< task0 task1)
		)
		:constraints (and
			(not (= ?mactc_c_d ?mactc_tt_d_prev))
		)
	)

	(:method method7
		:parameters (?macc_c_d - calib_direction ?macc_c_i - instrument ?macc_c_s - satellite)
		:task (auto_calibrate ?macc_c_s ?macc_c_i)
		:subtasks (and
		 (task0 (calibrate ?macc_c_s ?macc_c_i ?macc_c_d))
		)
	)

	(:durative-action turn_to
		:parameters (?t_s - satellite ?t_d_new - direction ?t_d_prev - direction)
		:duration (= ?duration (turn-time ?t_d_new ?t_d_prev))
		:condition
			(and
				(at start (not (= ?t_d_new ?t_d_prev)))
				(at start (pointing ?t_s ?t_d_prev))
			)
		:effect
			(and
				(at end (pointing ?t_s ?t_d_new))
				(at end (not (pointing ?t_s ?t_d_prev)))
			)
	)

	(:durative-action switch_on
		:parameters (?so_i - instrument ?so_s - satellite)
		:duration  (= ?duration 1)
		:condition
		    ;; NB We can constraint (on_board ?sof_i ?sof_s)
		    (and
				(at start (on_board ?so_i ?so_s))
				(at start (power_avail ?so_s))
			)
		:effect
			(and
				(at end (power_on ?so_i))
				(at end (not (calibrated ?so_i)))
				(at end (not (power_avail ?so_s)))
			)
	)

	(:durative-action switch_off
		:parameters (?sof_i - instrument ?sof_s - satellite)
		:duration  (= ?duration 1)
		:condition
		    ;; NB We can constraint (on_board ?sof_i ?sof_s)
			(and
				(at start (on_board ?sof_i ?sof_s))
				(at start (power_on ?sof_i))
			)
		:effect
			(and
				(at end (not (power_on ?sof_i)))
				(at end (power_avail ?sof_s))
			)
	)


	(:durative-action calibrate
		:parameters (?c_s - satellite ?c_i - instrument ?c_d - calib_direction)
		:duration (= ?duration (calibration-time ?c_i))
		:condition
			(and
				(at start (on_board ?c_i ?c_s))
				(at start (calibration_target ?c_i ?c_d))
				(at start (pointing ?c_s ?c_d))
				(at start (power_on ?c_i))
			)
		:effect
			(and
				(at end (calibrated ?c_i))
			)
	)

	(:durative-action take_image
		:parameters (?ti_s - satellite ?ti_d - image_direction ?ti_i - instrument ?ti_m - mode)
		:duration (= ?duration 2)
		:condition (and
			     (over all (observable ?ti_d))
			     (at start (calibrated ?ti_i))
			     (at start (pointing ?ti_s ?ti_d))
			     (over all (on_board ?ti_i ?ti_s))
			     (over all (power_on ?ti_i))
			     (at start (supports ?ti_i ?ti_m))
			)
		:effect
			(and
				 (at end (have_image ?ti_d ?ti_m))
			)
	)
)
